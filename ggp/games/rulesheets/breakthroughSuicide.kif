;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Breakthrough;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ROLE Relations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(role white)(role black);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; INIT Relations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(init (cellHolds 1 1 white))(init (cellHolds 2 1 white))(init (cellHolds 3 1 white))(init (cellHolds 4 1 white))(init (cellHolds 5 1 white))(init (cellHolds 6 1 white))(init (cellHolds 7 1 white))(init (cellHolds 8 1 white))(init (cellHolds 1 2 white))(init (cellHolds 2 2 white))(init (cellHolds 3 2 white))(init (cellHolds 4 2 white))(init (cellHolds 5 2 white))(init (cellHolds 6 2 white))(init (cellHolds 7 2 white))(init (cellHolds 8 2 white))(init (cellHolds 1 7 black))(init (cellHolds 2 7 black))(init (cellHolds 3 7 black))(init (cellHolds 4 7 black))(init (cellHolds 5 7 black))(init (cellHolds 6 7 black))(init (cellHolds 7 7 black))(init (cellHolds 8 7 black))(init (cellHolds 1 8 black))(init (cellHolds 2 8 black))(init (cellHolds 3 8 black))(init (cellHolds 4 8 black))(init (cellHolds 5 8 black))(init (cellHolds 6 8 black))(init (cellHolds 7 8 black))(init (cellHolds 8 8 black))(init (control white));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; LEGAL Relations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(<= (legal white (move ?x ?y1 ?x ?y2))    (true (control white))    (true (cellHolds ?x ?y1 white))    (++ ?y1 ?y2)    (cellEmpty ?x ?y2))(<= (legal white (move ?x1 ?y1 ?x2 ?y2))    (true (control white))    (true (cellHolds ?x1 ?y1 white))    (++ ?y1 ?y2)    (++ ?x1 ?x2)    (not (true (cellHolds ?x2 ?y2 white))))(<= (legal white (move ?x1 ?y1 ?x2 ?y2))    (true (control white))    (true (cellHolds ?x1 ?y1 white))    (++ ?y1 ?y2)    (++ ?x2 ?x1)    (not (true (cellHolds ?x2 ?y2 white))))(<= (legal black (move ?x ?y1 ?x ?y2))    (true (control black))    (true (cellHolds ?x ?y1 black))    (++ ?y2 ?y1)    (cellEmpty ?x ?y2))(<= (legal black (move ?x1 ?y1 ?x2 ?y2))    (true (control black))    (true (cellHolds ?x1 ?y1 black))    (++ ?y2 ?y1)    (++ ?x1 ?x2)    (not (true (cellHolds ?x2 ?y2 black))))(<= (legal black (move ?x1 ?y1 ?x2 ?y2))    (true (control black))    (true (cellHolds ?x1 ?y1 black))    (++ ?y2 ?y1)    (++ ?x2 ?x1)    (not (true (cellHolds ?x2 ?y2 black))))    (<= (legal white noop)    (true (control black)))(<= (legal black noop)    (true (control white)))    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; NEXT Relations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    (<= (next (cellHolds ?x2 ?y2 ?player))    (role ?player)    (does ?player (move ?x1 ?y1 ?x2 ?y2)))(<= (next (cellHolds ?x3 ?y3 ?state))    (true (cellHolds ?x3 ?y3 ?state))    (role ?player)    (does ?player (move ?x1 ?y1 ?x2 ?y2))    (distinctCell ?x1 ?y1 ?x3 ?y3)    (distinctCell ?x2 ?y2 ?x3 ?y3))    (<= (next (control white))    (true (control black)))(<= (next (control black))    (true (control white)))    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; TERMINAL Relations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(<= terminal     whiteWin)(<= terminal    blackWin);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; GOAL Relations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(<= (goal white 100)    blackWin)(<= (goal white 0)    (not blackWin))    (<= (goal black 100)    whiteWin)(<= (goal black 0)    (not whiteWin));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; View Definitions;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(<= (cell ?x ?y)    (index ?x)    (index ?y))    (<= (cellEmpty ?x ?y)    (cell ?x ?y)    (not (true (cellHolds ?x ?y white)))    (not (true (cellHolds ?x ?y black))))    (<= (distinctCell ?x1 ?y1 ?x2 ?y2)    (cell ?x1 ?y1)    (cell ?x2 ?y2)    (distinct ?x1 ?x2))(<= (distinctCell ?x1 ?y1 ?x2 ?y2)    (cell ?x1 ?y1)    (cell ?x2 ?y2)    (distinct ?y1 ?y2))    (<= whiteWin    (index ?x)    (true (cellHolds ?x 8 white)))(<= blackWin    (index ?x)    (true (cellHolds ?x 1 black)))    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Static Relations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(index 1) (index 2) (index 3) (index 4) (index 5) (index 6) (index 7) (index 8)(++ 1 2)  (++ 2 3)  (++ 3 4)  (++ 4 5)  (++ 5 6)  (++ 6 7)  (++ 7 8)( base cellholds ( val 1 2 3 4 5 6 7 8 ) ( val 1 2 3 4 5 6 7 8 ) ( val black white ) )
( base control ( val black white ) )
