(role red)(role blue)(index 0)(index 1)(index 2)(index 3)(index 4)(index 5);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                         INITS                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(init (cell 1 1 redHead))(init (cell 4 4 blueHead))(init (cell 0 0 w))(init (cell 0 1 w))(init (cell 0 2 w))(init (cell 0 3 w))(init (cell 0 4 w))(init (cell 0 5 w))(init (cell 1 0 w))(init (cell 2 0 w))(init (cell 3 0 w))(init (cell 4 0 w))(init (cell 5 0 w))(init (cell 5 1 w))(init (cell 5 2 w))(init (cell 5 3 w))(init (cell 5 4 w))(init (cell 5 5 w))(init (cell 1 5 w))(init (cell 2 5 w))(init (cell 3 5 w))(init (cell 4 5 w));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                        LEGAL                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(<= (legal ?player moveDown)  (role ?player))(<= (legal ?player moveUp)  (role ?player))(<= (legal ?player moveLeft)  (role ?player))(<= (legal ?player moveRight)  (role ?player));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                        PHYSICS                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(<= (next (cell ?x ?y f))  (true (cell ?x ?y f)))(<= (next (cell ?x ?y w))  (true (cell ?x ?y w)))(<= (next (cell ?x ?y f))  (true (cell ?x ?y blueHead)))(<= (next (cell ?a ?y blueHead))  (does blue moveLeft)  (true (cell ?x ?y blueHead))  (++ ?a ?x))(<= (next (cell ?a ?y blueHead))  (does blue moveRight)  (true (cell ?x ?y blueHead))  (++ ?x ?a))(<= (next (cell ?x ?b blueHead))  (does blue moveDown)  (true (cell ?x ?y blueHead))  (++ ?y ?b))(<= (next (cell ?x ?b blueHead))  (does blue moveUp)  (true (cell ?x ?y blueHead))  (++ ?b ?y))(<= (next (cell ?x ?y f))  (true (cell ?x ?y redHead)))(<= (next (cell ?a ?y redHead))  (does red moveLeft)  (true (cell ?x ?y redHead))  (++ ?a ?x))(<= (next (cell ?a ?y redHead))  (does red moveRight)  (true (cell ?x ?y redHead))  (++ ?x ?a))(<= (next (cell ?x ?b redHead))  (does red moveDown)  (true (cell ?x ?y redHead))  (++ ?y ?b))(<= (next (cell ?x ?b redHead))  (does red moveUp)  (true (cell ?x ?y redHead))  (++ ?b ?y));;;;;;;;;;;; HASBLANK ;;;;;;;;;;;(<= hasBlank  (index ?y)  (index ?x)  (not (cell ?x ?y redHead))  (not (cell ?x ?y blueHead))  (not (cell ?x ?y f))  (not (cell ?x ?y w)));;;;;;;;;;;; ERRORS ;;;;;;;;;;;;;(<= blueError  (true (cell ?x ?y blueHead))  (true (cell ?x ?y w)))(<= blueError  (true (cell ?x ?y blueHead))  (true (cell ?x ?y f)))(<= blueError  (true (cell ?x ?y blueHead))  (true (cell ?x ?y redHead)))(<= redError  (true (cell ?x ?y redHead))  (true (cell ?x ?y w)))(<= redError  (true (cell ?x ?y redHead))  (true (cell ?x ?y f)))(<= redError  (true (cell ?x ?y redHead))  (true (cell ?x ?y blueHead)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                         GOAL STATES                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(<= (goal red 0)  (not blueError)  (not redError)  hasBlank)(<= (goal red 0)  (not blueError)  redError  hasBlank)(<= (goal red 100)  blueError  (not redError)  hasBlank)(<= (goal red 50)  blueError  redError  hasBlank)(<= (goal red 50)  (not blueError)  (not redError)  (not hasBlank))(<= (goal red 0)  (not blueError)  redError  (not hasBlank))(<= (goal red 100)  blueError  (not redError)  (not hasBlank))(<= (goal red 50)  blueError  redError  (not hasBlank))(<= (goal blue 100)  (goal red 0))(<= (goal blue 0)  (goal red 100))(<= (goal blue 50)  (goal red 50));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                     TERMINAL STATES                     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(<= terminal  blueError)(<= terminal  redError)(<= terminal  (not hasBlank));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                         ++                              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(++ 0 1)(++ 1 2)(++ 2 3)(++ 3 4)(++ 4 5)(++ 5 6)(++ 6 7)(++ 7 8)(++ 8 9)(++ 9 10)