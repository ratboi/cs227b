;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Othello;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    (role white)    (role black)        ;;;;        (init (cell 1 1 green))    (init (cell 1 2 green))    (init (cell 1 3 green))    (init (cell 1 4 green))    (init (cell 1 5 green))    (init (cell 1 6 green))    (init (cell 1 7 green))    (init (cell 1 8 green))        (init (cell 2 1 green))    (init (cell 2 2 green))    (init (cell 2 3 green))    (init (cell 2 4 green))    (init (cell 2 5 green))    (init (cell 2 6 green))    (init (cell 2 7 green))    (init (cell 2 8 green))        (init (cell 3 1 green))    (init (cell 3 2 green))    (init (cell 3 3 green))    (init (cell 3 4 green))    (init (cell 3 5 green))    (init (cell 3 6 green))    (init (cell 3 7 green))    (init (cell 3 8 green))        (init (cell 4 1 green))    (init (cell 4 2 green))    (init (cell 4 3 green))    (init (cell 4 4 white))    (init (cell 4 5 black))    (init (cell 4 6 green))    (init (cell 4 7 green))    (init (cell 4 8 green))        (init (cell 5 1 green))    (init (cell 5 2 green))    (init (cell 5 3 green))    (init (cell 5 4 black))    (init (cell 5 5 white))    (init (cell 5 6 green))    (init (cell 5 7 green))    (init (cell 5 8 green))        (init (cell 6 1 green))    (init (cell 6 2 green))    (init (cell 6 3 green))    (init (cell 6 4 green))    (init (cell 6 5 green))    (init (cell 6 6 green))    (init (cell 6 7 green))    (init (cell 6 8 green))        (init (cell 7 1 green))    (init (cell 7 2 green))    (init (cell 7 3 green))    (init (cell 7 4 green))    (init (cell 7 5 green))    (init (cell 7 6 green))    (init (cell 7 7 green))    (init (cell 7 8 green))        (init (cell 8 1 green))    (init (cell 8 2 green))    (init (cell 8 3 green))    (init (cell 8 4 green))    (init (cell 8 5 green))    (init (cell 8 6 green))    (init (cell 8 7 green))    (init (cell 8 8 green))        (init (control white))        ;;;;        (successor 0 1)    (successor 1 2)    (successor 2 3)    (successor 3 4)    (successor 4 5)    (successor 5 6)    (successor 6 7)    (successor 7 8)    (successor 8 9)    (successor 9 10)    (successor 10 11)    (successor 11 12)    (successor 12 13)    (successor 13 14)    (successor 14 15)    (successor 15 16)    (successor 16 17)    (successor 17 18)    (successor 18 19)    (successor 19 20)    (successor 20 21)    (successor 21 22)    (successor 22 23)    (successor 23 24)    (successor 24 25)    (successor 25 26)    (successor 26 27)    (successor 27 28)    (successor 28 29)    (successor 29 30)    (successor 30 31)    (successor 31 32)    (successor 32 33)    (successor 33 34)    (successor 34 35)    (successor 35 36)    (successor 36 37)    (successor 37 38)    (successor 38 39)    (successor 39 40)    (successor 40 41)    (successor 41 42)    (successor 42 43)    (successor 43 44)    (successor 44 45)    (successor 45 46)    (successor 46 47)    (successor 47 48)    (successor 48 49)    (successor 49 50)    (successor 50 51)    (successor 51 52)    (successor 52 53)    (successor 53 54)    (successor 54 55)    (successor 55 56)    (successor 56 57)    (successor 57 58)    (successor 58 59)    (successor 59 60)    (successor 60 61)    (successor 61 62)    (successor 62 63)    (successor 63 64)        (<= (greater ?a ?b)        (successor ?b ?a))    (<= (greater ?a ?b)        (distinct ?a ?b)        (successor ?c ?a)        (greater ?c ?b))        ;;;;        (opp n s)    (opp s n)    (opp e w)    (opp w e)    (opp nw se)    (opp se nw)    (opp ne sw)    (opp sw ne)        (<= (adj nw ?a ?b ?c ?d)        (successor ?c ?a)        (successor ?d ?b))        (<= (adj sw ?a ?b ?c ?d)        (successor ?a ?c)        (successor ?d ?b))        (<= (adj ne ?a ?b ?c ?d)        (successor ?c ?a)        (successor ?b ?d))        (<= (adj se ?a ?b ?c ?d)        (successor ?a ?c)        (successor ?b ?d))        (<= (adj w ?a ?b ?a ?d)        (successor ?d ?b))        (<= (adj e ?a ?b ?a ?d)        (successor ?b ?d))        (<= (adj n ?a ?b ?c ?b)        (successor ?c ?a))        (<= (adj s ?a ?b ?c ?b)        (successor ?a ?c))        ;; True if there is a line of ?c1 pieces from ?i ?j on a line     ;; ending just before ?m ?n pointing in ?dir        (<= (onalinep ?i ?j ?c1 ?m ?n ?c2 ?dir)        (true (cell ?i ?j ?c1))        (adj ?dir ?i ?j ?m ?n))        (<= (onalinep ?i ?j ?c1 ?m ?n ?c2 ?dir)        (true (cell ?i ?j ?c1))        (adj ?dir ?i ?j ?x ?y)        (onalinep ?x ?y ?c1 ?m ?n ?c2 ?dir))        ;; True if there is a line of ?c1 pieces from ?i ?j on a line     ;; ending just before ?m ?n pointing in ?dir, where ?m ?n is    ;; a ?c2 piece        (<= (onaline ?i ?j ?c1 ?m ?n ?c2 ?dir)        (true (cell ?i ?j ?c1))        (true (cell ?m ?n ?c2))        (adj ?dir ?i ?j ?m ?n))        (<= (onaline ?i ?j ?c1 ?m ?n ?c2 ?dir)        (true (cell ?i ?j ?c1))        (adj ?dir ?i ?j ?x ?y)        (onaline ?x ?y ?c1 ?m ?n ?c2 ?dir))        ;; A black piece at ?i ?j gets flipped by white placement at ?m ?n         (<= (flip ?i ?j white ?m ?n)        (onalinep ?i ?j black ?m ?n white ?dir)        (opp ?dir ?odir)        (onaline ?i ?j black ?x ?y white ?odir))        ;; A white piece at ?i ?j gets flipped by black placement at ?m ?n         (<= (flip ?i ?j black ?m ?n)        (onalinep ?i ?j white ?m ?n black ?dir)        (opp ?dir ?odir)        (onaline ?i ?j white ?x ?y black ?odir))            (<= (clear ?i ?j black ?m ?n)        (not (onalinep ?i ?j white ?m ?n black ?dir)))        (<= (clear ?i ?j white ?m ?n)        (not (onalinep ?i ?j black ?m ?n white ?dir)))        (<= (clear ?i ?j black ?m ?n)        (onalinep ?i ?j white ?m ?n black ?dir)        (opp ?dir ?odir)        (not (onaline ?i ?j white ?x ?y black ?odir)))        (<= (clear ?i ?j white ?m ?n)        (onalinep ?i ?j black ?m ?n white ?dir)        (opp ?dir ?odir)        (not (onaline ?i ?j black ?x ?y white ?odir)))        ;;;;        (<= (next (cell ?m ?n white))        (does white (place ?m ?n))        (true (cell ?m ?n green)))        (<= (next (cell ?m ?n black))        (does black (place ?m ?n))        (true (cell ?m ?n green)))        (<= (next (cell ?m ?n white))        (true (cell ?m ?n black))        (does white (place ?i ?j))        (flip ?m ?n white ?i ?j))        (<= (next (cell ?m ?n black))        (true (cell ?m ?n white))        (does black (place ?i ?j))        (flip ?m ?n black ?i ?j))        ;; a piece stays the same color if that player moved--can't flip your own        (<= (next (cell ?m ?n black))        (true (cell ?m ?n black))        (does black (place ?x ?y)))        (<= (next (cell ?m ?n white))        (true (cell ?m ?n white))        (does white (place ?x ?y)))        (<= (next (cell ?m ?n black))        (true (cell ?m ?n black))        (does white (place ?i ?j))        (clear ?m ?n white ?i ?j))        (<= (next (cell ?m ?n white))        (true (cell ?m ?n white))        (does black (place ?i ?j))        (clear ?m ?n black ?i ?j))        (<= (next (cell ?m ?n green))        (does ?w (place ?j ?k))        (true (cell ?m ?n green))        (or (distinct ?m ?j) (distinct ?n ?k)))        ;;; Everything stays the same if the player with control noops    (<= (next (cell ?m ?n ?color))        (true (cell ?m ?n ?color))        (true (control ?p))        (does ?p noop))        (<= (next (control white))        (true (control black)))        (<= (next (control black))        (true (control white)))        ;;;;        (<= (legal white (place ?m ?n))        (true (control white))        (true (cell ?m ?n green))        (flip ?i ?j white ?m ?n))        (<= (legal black (place ?m ?n))        (true (control black))        (true (cell ?m ?n green))        (flip ?i ?j black ?m ?n))        (<= (legal white noop)        (true (cell ?x ?y green))        (true (control black)))        (<= (legal black noop)        (true (cell ?x ?y green))        (true (control white)))        (<= (legal ?p noop)        (true (control ?p))        (not (flippable ?p)))        (<= (flippable ?p)        (true (cell ?x ?y green))        (flip ?i ?j ?p ?x ?y))        ;;;;        (<= (count ?row ?column ?whitenum ?blacknum)        (distinct ?column 8)        (true (cell ?row ?column white))        (successor ?column ?nc)        (count ?row ?nc ?rest ?blacknum)        (successor ?rest ?whitenum))        (<= (count ?row ?column ?whitenum ?blacknum)        (distinct ?column 8)        (true (cell ?row ?column black))        (successor ?column ?nc)        (count ?row ?nc ?whitenum ?rest)        (successor ?rest ?blacknum))        (<= (count ?row ?column ?whitenum ?blacknum)        (distinct ?column 8)        (true (cell ?row ?column green))        (successor ?column ?nc)        (count ?row ?nc ?whitenum ?blacknum))        (<= (count ?row 8 ?whitenum ?blacknum)        (distinct ?row 8)        (true (cell ?row 8 white))        (successor ?row ?nr)        (count ?nr 1 ?rest ?blacknum)        (successor ?rest ?whitenum))        (<= (count ?row 8 ?whitenum ?blacknum)        (distinct ?row 8)        (true (cell ?row 8 black))        (successor ?row ?nr)        (count ?nr 1 ?whitenum ?rest)        (successor ?rest ?blacknum))        (<= (count ?row 8 ?whitenum ?blacknum)        (distinct ?row 8)        (true (cell ?row 8 green))        (successor ?row ?nr)        (count ?nr 1 ?whitenum ?blacknum))        (<= (count 8 8 1 0)        (true (cell 8 8 white)))        (<= (count 8 8 0 1)        (true (cell 8 8 black)))        (<= (count 8 8 0 0)        (true (cell 8 8 green)))        ;;;;        (<= (goal white 100)        (count 1 1 ?w ?b)        (greater ?w ?b))        (<= (goal black 100)        (count 1 1 ?w ?b)        (greater ?b ?w))        (<= (goal ?role 50)        (count 1 1 ?x ?x))        (<= (goal black 0)        (count 1 1 ?w ?b)        (greater ?w ?b))        (<= (goal white 0)        (count 1 1 ?w ?b)        (greater ?b ?w))        ;;;;        (<= open        (true (cell ?m ?n green)))    (<= terminal        (not open))    (<= terminal        (not (flippable white))        (not (flippable black)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;( base cell ( val 1 2 3 4 5 6 7 8 ) ( val 1 2 3 4 5 6 7 8 ) ( val black green white ) )
( base control ( val black white ) )
